
ServoController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000c68  00000cfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  0080007a  0080007a  00000d16  2**0
                  ALLOC
  3 .stab         00002484  00000000  00000000  00000d18  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fc1  00000000  00000000  0000319c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000415d  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000028  00000000  00000000  0000416e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000006c3  00000000  00000000  00004196  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000027a  00000000  00000000  00004859  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001c6  00000000  00000000  00004ad3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000214  00000000  00000000  00004c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000378  00000000  00000000  00004eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000805  00000000  00000000  00005228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  00005a2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 a8 01 	jmp	0x350	; 0x350 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 ab 02 	jmp	0x556	; 0x556 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e6       	ldi	r30, 0x68	; 104
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 39       	cpi	r26, 0x98	; 152
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <main>
  8a:	0c 94 32 06 	jmp	0xc64	; 0xc64 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CreateList>:
//*****************************************************************************************************//
//	      										 FUNCTIONS					 	   				       //
//*****************************************************************************************************//

servoList* CreateList()
{
  92:	cf 92       	push	r12
  94:	df 92       	push	r13
  96:	ef 92       	push	r14
  98:	ff 92       	push	r15
  9a:	0f 93       	push	r16
  9c:	1f 93       	push	r17
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	84 e6       	ldi	r24, 0x64	; 100
  a4:	c8 2e       	mov	r12, r24
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	d8 2e       	mov	r13, r24
	int i;
	servoList *head, *first, *temp = 0;
  aa:	e1 2c       	mov	r14, r1
  ac:	f1 2c       	mov	r15, r1
	first = 0;
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	10 e0       	ldi	r17, 0x00	; 0
	for(i=0; i<8; i++){
  b2:	c0 e0       	ldi	r28, 0x00	; 0
  b4:	d0 e0       	ldi	r29, 0x00	; 0
		head  = (servoList*)malloc(sizeof(servoList));
  b6:	86 e0       	ldi	r24, 0x06	; 6
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 0b 05 	call	0xa16	; 0xa16 <malloc>
  be:	fc 01       	movw	r30, r24
		head->angle=servoStartAngle[i];
  c0:	d6 01       	movw	r26, r12
  c2:	8d 91       	ld	r24, X+
  c4:	9d 91       	ld	r25, X+
  c6:	6d 01       	movw	r12, r26
  c8:	91 83       	std	Z+1, r25	; 0x01
  ca:	80 83       	st	Z, r24
		head->number=i+1;
  cc:	21 96       	adiw	r28, 0x01	; 1
  ce:	d3 83       	std	Z+3, r29	; 0x03
  d0:	c2 83       	std	Z+2, r28	; 0x02
		if (first != 0){
  d2:	01 15       	cp	r16, r1
  d4:	11 05       	cpc	r17, r1
  d6:	31 f0       	breq	.+12     	; 0xe4 <CreateList+0x52>
			temp->node = head;
  d8:	d7 01       	movw	r26, r14
  da:	15 96       	adiw	r26, 0x05	; 5
  dc:	fc 93       	st	X, r31
  de:	ee 93       	st	-X, r30
  e0:	14 97       	sbiw	r26, 0x04	; 4
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <CreateList+0x54>
{
	int i;
	servoList *head, *first, *temp = 0;
	first = 0;
	for(i=0; i<8; i++){
		head  = (servoList*)malloc(sizeof(servoList));
  e4:	8f 01       	movw	r16, r30
servoList* CreateList()
{
	int i;
	servoList *head, *first, *temp = 0;
	first = 0;
	for(i=0; i<8; i++){
  e6:	c8 30       	cpi	r28, 0x08	; 8
  e8:	d1 05       	cpc	r29, r1
  ea:	11 f0       	breq	.+4      	; 0xf0 <CreateList+0x5e>
		head  = (servoList*)malloc(sizeof(servoList));
  ec:	7f 01       	movw	r14, r30
  ee:	e3 cf       	rjmp	.-58     	; 0xb6 <CreateList+0x24>
			temp = head;
		}
		else
		first = temp = head;
	}
	temp->node = 0;
  f0:	15 82       	std	Z+5, r1	; 0x05
  f2:	14 82       	std	Z+4, r1	; 0x04
	temp = first;
	return first;
}
  f4:	c8 01       	movw	r24, r16
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	1f 91       	pop	r17
  fc:	0f 91       	pop	r16
  fe:	ff 90       	pop	r15
 100:	ef 90       	pop	r14
 102:	df 90       	pop	r13
 104:	cf 90       	pop	r12
 106:	08 95       	ret

00000108 <ArrangeAngle>:

servoList* ArrangeAngle(servoList *servoAngle,servoList *nodeHead,int num)
{
 108:	af 92       	push	r10
 10a:	bf 92       	push	r11
 10c:	cf 92       	push	r12
 10e:	df 92       	push	r13
 110:	ef 92       	push	r14
 112:	ff 92       	push	r15
 114:	0f 93       	push	r16
 116:	1f 93       	push	r17
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	dc 01       	movw	r26, r24
 11e:	fb 01       	movw	r30, r22
	if(servoAngle->angle<=180 && servoAngle->number<=8){
 120:	0d 91       	ld	r16, X+
 122:	1c 91       	ld	r17, X
 124:	11 97       	sbiw	r26, 0x01	; 1
 126:	05 3b       	cpi	r16, 0xB5	; 181
 128:	11 05       	cpc	r17, r1
 12a:	08 f0       	brcs	.+2      	; 0x12e <ArrangeAngle+0x26>
 12c:	7c c0       	rjmp	.+248    	; 0x226 <ArrangeAngle+0x11e>
 12e:	12 96       	adiw	r26, 0x02	; 2
 130:	ed 90       	ld	r14, X+
 132:	fc 90       	ld	r15, X
 134:	13 97       	sbiw	r26, 0x03	; 3
 136:	89 e0       	ldi	r24, 0x09	; 9
 138:	e8 16       	cp	r14, r24
 13a:	f1 04       	cpc	r15, r1
 13c:	08 f0       	brcs	.+2      	; 0x140 <ArrangeAngle+0x38>
 13e:	73 c0       	rjmp	.+230    	; 0x226 <ArrangeAngle+0x11e>
		servoList *servoPreviousNode;
		servoNode = nodeHead;
		servoPreviousNode=nodeHead;						//CHANGED
		int flagAngle=0;
		int flagNumber=0;
		if(servoAngle->number == nodeHead->number){
 140:	82 81       	ldd	r24, Z+2	; 0x02
 142:	93 81       	ldd	r25, Z+3	; 0x03
 144:	e8 16       	cp	r14, r24
 146:	f9 06       	cpc	r15, r25
 148:	99 f4       	brne	.+38     	; 0x170 <ArrangeAngle+0x68>
//Check the difference between *servoSwitchPtr=servoNodeHead and servoSwitchPtr=&servoNodeHead;
//It does not work with servoSwitchPtr=&nodeHead;
		if(num==1)
 14a:	41 30       	cpi	r20, 0x01	; 1
 14c:	51 05       	cpc	r21, r1
 14e:	29 f4       	brne	.+10     	; 0x15a <ArrangeAngle+0x52>
			*servoSwitchPtr=nodeHead;
 150:	c0 91 90 00 	lds	r28, 0x0090
 154:	d0 91 91 00 	lds	r29, 0x0091
 158:	04 c0       	rjmp	.+8      	; 0x162 <ArrangeAngle+0x5a>
		else
			*servoSwitchPtrDup=nodeHead;
 15a:	c0 91 92 00 	lds	r28, 0x0092
 15e:	d0 91 93 00 	lds	r29, 0x0093
 162:	f9 83       	std	Y+1, r31	; 0x01
 164:	e8 83       	st	Y, r30
			nodeHead=servoNode->node;
 166:	a4 80       	ldd	r10, Z+4	; 0x04
 168:	b5 80       	ldd	r11, Z+5	; 0x05
			flagNumber=1;
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	03 c0       	rjmp	.+6      	; 0x176 <ArrangeAngle+0x6e>
 170:	5b 01       	movw	r10, r22
		servoList *servoNode;
		servoList *servoPreviousNode;
		servoNode = nodeHead;
		servoPreviousNode=nodeHead;						//CHANGED
		int flagAngle=0;
		int flagNumber=0;
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	70 e0       	ldi	r23, 0x00	; 0
		else
			*servoSwitchPtrDup=nodeHead;
			nodeHead=servoNode->node;
			flagNumber=1;
		}
		if(servoAngle->angle <= nodeHead->angle){
 176:	e5 01       	movw	r28, r10
 178:	88 81       	ld	r24, Y
 17a:	99 81       	ldd	r25, Y+1	; 0x01
 17c:	80 17       	cp	r24, r16
 17e:	91 07       	cpc	r25, r17
 180:	48 f0       	brcs	.+18     	; 0x194 <ArrangeAngle+0x8c>
			servoAngle->node=nodeHead;
 182:	15 96       	adiw	r26, 0x05	; 5
 184:	bc 92       	st	X, r11
 186:	ae 92       	st	-X, r10
 188:	14 97       	sbiw	r26, 0x04	; 4
			nodeHead=servoAngle;
			servoPreviousNode=servoAngle;
 18a:	cd 01       	movw	r24, r26
			nodeHead=servoNode->node;
			flagNumber=1;
		}
		if(servoAngle->angle <= nodeHead->angle){
			servoAngle->node=nodeHead;
			nodeHead=servoAngle;
 18c:	5d 01       	movw	r10, r26
			servoPreviousNode=servoAngle;
			flagAngle=1;
 18e:	21 e0       	ldi	r18, 0x01	; 1
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	12 c0       	rjmp	.+36     	; 0x1b8 <ArrangeAngle+0xb0>
{
	if(servoAngle->angle<=180 && servoAngle->number<=8){
		servoList *servoNode;
		servoList *servoPreviousNode;
		servoNode = nodeHead;
		servoPreviousNode=nodeHead;						//CHANGED
 194:	cf 01       	movw	r24, r30
		int flagAngle=0;
 196:	20 e0       	ldi	r18, 0x00	; 0
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	0e c0       	rjmp	.+28     	; 0x1b8 <ArrangeAngle+0xb0>
			nodeHead=servoAngle;
			servoPreviousNode=servoAngle;
			flagAngle=1;
		} 
		while(servoNode !=NULL){
			if((servoAngle->angle <= servoNode->angle)&& flagAngle !=1){
 19c:	c0 80       	ld	r12, Z
 19e:	d1 80       	ldd	r13, Z+1	; 0x01
 1a0:	c0 16       	cp	r12, r16
 1a2:	d1 06       	cpc	r13, r17
 1a4:	60 f4       	brcc	.+24     	; 0x1be <ArrangeAngle+0xb6>
				servoPreviousNode->node=servoAngle;
				servoAngle->node=servoNode;
				servoPreviousNode=servoAngle;
				flagAngle=1;
			}
			if((servoAngle->number==servoNode->number)&& flagNumber!=1){
 1a6:	c2 80       	ldd	r12, Z+2	; 0x02
 1a8:	d3 80       	ldd	r13, Z+3	; 0x03
 1aa:	ec 14       	cp	r14, r12
 1ac:	fd 04       	cpc	r15, r13
 1ae:	a9 f0       	breq	.+42     	; 0x1da <ArrangeAngle+0xd2>
 1b0:	cf 01       	movw	r24, r30
					*servoSwitchPtrDup=servoNode;
				servoPreviousNode->node=servoNode->node;
				flagNumber=1;
			}
			servoPreviousNode=(servoAngle->number==servoNode->number)? servoPreviousNode:servoNode;
			servoNode=servoNode->node;		
 1b2:	04 80       	ldd	r0, Z+4	; 0x04
 1b4:	f5 81       	ldd	r31, Z+5	; 0x05
 1b6:	e0 2d       	mov	r30, r0
			servoAngle->node=nodeHead;
			nodeHead=servoAngle;
			servoPreviousNode=servoAngle;
			flagAngle=1;
		} 
		while(servoNode !=NULL){
 1b8:	30 97       	sbiw	r30, 0x00	; 0
 1ba:	81 f7       	brne	.-32     	; 0x19c <ArrangeAngle+0x94>
 1bc:	26 c0       	rjmp	.+76     	; 0x20a <ArrangeAngle+0x102>
			if((servoAngle->angle <= servoNode->angle)&& flagAngle !=1){
 1be:	21 30       	cpi	r18, 0x01	; 1
 1c0:	31 05       	cpc	r19, r1
 1c2:	89 f3       	breq	.-30     	; 0x1a6 <ArrangeAngle+0x9e>
				servoPreviousNode->node=servoAngle;
 1c4:	ec 01       	movw	r28, r24
 1c6:	bd 83       	std	Y+5, r27	; 0x05
 1c8:	ac 83       	std	Y+4, r26	; 0x04
				servoAngle->node=servoNode;
 1ca:	15 96       	adiw	r26, 0x05	; 5
 1cc:	fc 93       	st	X, r31
 1ce:	ee 93       	st	-X, r30
 1d0:	14 97       	sbiw	r26, 0x04	; 4
				servoPreviousNode=servoAngle;
 1d2:	cd 01       	movw	r24, r26
				flagAngle=1;
 1d4:	21 e0       	ldi	r18, 0x01	; 1
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	e6 cf       	rjmp	.-52     	; 0x1a6 <ArrangeAngle+0x9e>
			}
			if((servoAngle->number==servoNode->number)&& flagNumber!=1){
 1da:	61 30       	cpi	r22, 0x01	; 1
 1dc:	71 05       	cpc	r23, r1
 1de:	01 f1       	breq	.+64     	; 0x220 <ArrangeAngle+0x118>
				if(num==1)
 1e0:	41 30       	cpi	r20, 0x01	; 1
 1e2:	51 05       	cpc	r21, r1
 1e4:	29 f4       	brne	.+10     	; 0x1f0 <ArrangeAngle+0xe8>
					*servoSwitchPtr=servoNode;
 1e6:	60 91 90 00 	lds	r22, 0x0090
 1ea:	70 91 91 00 	lds	r23, 0x0091
 1ee:	04 c0       	rjmp	.+8      	; 0x1f8 <ArrangeAngle+0xf0>
				else
					*servoSwitchPtrDup=servoNode;
 1f0:	60 91 92 00 	lds	r22, 0x0092
 1f4:	70 91 93 00 	lds	r23, 0x0093
 1f8:	eb 01       	movw	r28, r22
 1fa:	f9 83       	std	Y+1, r31	; 0x01
 1fc:	e8 83       	st	Y, r30
				servoPreviousNode->node=servoNode->node;
 1fe:	64 81       	ldd	r22, Z+4	; 0x04
 200:	75 81       	ldd	r23, Z+5	; 0x05
 202:	ec 01       	movw	r28, r24
 204:	7d 83       	std	Y+5, r23	; 0x05
 206:	6c 83       	std	Y+4, r22	; 0x04
 208:	0b c0       	rjmp	.+22     	; 0x220 <ArrangeAngle+0x118>
				flagNumber=1;
			}
			servoPreviousNode=(servoAngle->number==servoNode->number)? servoPreviousNode:servoNode;
			servoNode=servoNode->node;		
		}
		if(flagAngle==0){	
 20a:	23 2b       	or	r18, r19
 20c:	39 f4       	brne	.+14     	; 0x21c <ArrangeAngle+0x114>
			servoPreviousNode->node=servoAngle;
 20e:	fc 01       	movw	r30, r24
 210:	b5 83       	std	Z+5, r27	; 0x05
 212:	a4 83       	std	Z+4, r26	; 0x04
			servoAngle->node=NULL;
 214:	15 96       	adiw	r26, 0x05	; 5
 216:	1c 92       	st	X, r1
 218:	1e 92       	st	-X, r1
 21a:	14 97       	sbiw	r26, 0x04	; 4
		}
		return nodeHead;
 21c:	f5 01       	movw	r30, r10
 21e:	03 c0       	rjmp	.+6      	; 0x226 <ArrangeAngle+0x11e>
		while(servoNode !=NULL){
			if((servoAngle->angle <= servoNode->angle)&& flagAngle !=1){
				servoPreviousNode->node=servoAngle;
				servoAngle->node=servoNode;
				servoPreviousNode=servoAngle;
				flagAngle=1;
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	c6 cf       	rjmp	.-116    	; 0x1b2 <ArrangeAngle+0xaa>
		return nodeHead;
	}
	else{
		return nodeHead;
	}		
}
 226:	cf 01       	movw	r24, r30
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	ff 90       	pop	r15
 232:	ef 90       	pop	r14
 234:	df 90       	pop	r13
 236:	cf 90       	pop	r12
 238:	bf 90       	pop	r11
 23a:	af 90       	pop	r10
 23c:	08 95       	ret

0000023e <SendInteger>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23e:	ef e3       	ldi	r30, 0x3F	; 63
 240:	fc e9       	ldi	r31, 0x9C	; 156
 242:	31 97       	sbiw	r30, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <SendInteger+0x4>
 246:	00 c0       	rjmp	.+0      	; 0x248 <SendInteger+0xa>
 248:	00 00       	nop
}

void SendInteger(uint16_t num)
{
	_delay_ms(10);
	while(!(UCSRA && (1<<UDRE)));
 24a:	9b b1       	in	r25, 0x0b	; 11
 24c:	99 23       	and	r25, r25
 24e:	e9 f3       	breq	.-6      	; 0x24a <SendInteger+0xc>
	UDR=num;
 250:	8c b9       	out	0x0c, r24	; 12
 252:	08 95       	ret

00000254 <StringToInt>:
}

uint16_t StringToInt(char *dataStart)
{
 254:	fc 01       	movw	r30, r24
	uint16_t data=0;
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	90 e0       	ldi	r25, 0x00	; 0
	while(*dataStart!=END_OF_SIGNAL){	//ASSIGN THE STOP BIT RECOGNITION
		data=data*10+(*dataStart-48);
 25a:	3a e0       	ldi	r19, 0x0A	; 10
}

uint16_t StringToInt(char *dataStart)
{
	uint16_t data=0;
	while(*dataStart!=END_OF_SIGNAL){	//ASSIGN THE STOP BIT RECOGNITION
 25c:	21 91       	ld	r18, Z+
 25e:	2d 30       	cpi	r18, 0x0D	; 13
 260:	51 f0       	breq	.+20     	; 0x276 <StringToInt+0x22>
		data=data*10+(*dataStart-48);
 262:	ac 01       	movw	r20, r24
 264:	34 9f       	mul	r19, r20
 266:	c0 01       	movw	r24, r0
 268:	35 9f       	mul	r19, r21
 26a:	90 0d       	add	r25, r0
 26c:	11 24       	eor	r1, r1
 26e:	c0 97       	sbiw	r24, 0x30	; 48
 270:	82 0f       	add	r24, r18
 272:	91 1d       	adc	r25, r1
 274:	f3 cf       	rjmp	.-26     	; 0x25c <StringToInt+0x8>
		dataStart++;
	}
	return data;
}
 276:	08 95       	ret

00000278 <PrepareAddToList>:
		return nodeHead;
	}		
}

void PrepareAddToList(char *start)
{
 278:	ef 92       	push	r14
 27a:	ff 92       	push	r15
 27c:	0f 93       	push	r16
 27e:	1f 93       	push	r17
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	7c 01       	movw	r14, r24
	(*servoSwitchPtr)->number=(*start-48);
 286:	e0 91 90 00 	lds	r30, 0x0090
 28a:	f0 91 91 00 	lds	r31, 0x0091
 28e:	00 81       	ld	r16, Z
 290:	11 81       	ldd	r17, Z+1	; 0x01
 292:	ec 01       	movw	r28, r24
 294:	29 91       	ld	r18, Y+
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	20 53       	subi	r18, 0x30	; 48
 29a:	31 09       	sbc	r19, r1
 29c:	f8 01       	movw	r30, r16
 29e:	33 83       	std	Z+3, r19	; 0x03
 2a0:	22 83       	std	Z+2, r18	; 0x02
	(*servoSwitchPtr)->angle=StringToInt(start+1);
 2a2:	ce 01       	movw	r24, r28
 2a4:	0e 94 2a 01 	call	0x254	; 0x254 <StringToInt>
 2a8:	f8 01       	movw	r30, r16
 2aa:	91 83       	std	Z+1, r25	; 0x01
 2ac:	80 83       	st	Z, r24
	(*servoSwitchPtrDup)->number=(*start-48);
 2ae:	e0 91 92 00 	lds	r30, 0x0092
 2b2:	f0 91 93 00 	lds	r31, 0x0093
 2b6:	00 81       	ld	r16, Z
 2b8:	11 81       	ldd	r17, Z+1	; 0x01
 2ba:	f7 01       	movw	r30, r14
 2bc:	80 81       	ld	r24, Z
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	c0 97       	sbiw	r24, 0x30	; 48
 2c2:	f8 01       	movw	r30, r16
 2c4:	93 83       	std	Z+3, r25	; 0x03
 2c6:	82 83       	std	Z+2, r24	; 0x02
	(*servoSwitchPtrDup)->angle=StringToInt(start+1);
 2c8:	ce 01       	movw	r24, r28
 2ca:	0e 94 2a 01 	call	0x254	; 0x254 <StringToInt>
 2ce:	f8 01       	movw	r30, r16
 2d0:	91 83       	std	Z+1, r25	; 0x01
 2d2:	80 83       	st	Z, r24
}
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	1f 91       	pop	r17
 2da:	0f 91       	pop	r16
 2dc:	ff 90       	pop	r15
 2de:	ef 90       	pop	r14
 2e0:	08 95       	ret

000002e2 <SendList>:
	}
	return data;
}

servoList* SendList(servoList* head)
{
 2e2:	0f 93       	push	r16
 2e4:	1f 93       	push	r17
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	8c 01       	movw	r16, r24
	servoList *tempServo=head;
 2ec:	c8 2f       	mov	r28, r24
 2ee:	d1 2f       	mov	r29, r17
	while(tempServo!=NULL){
 2f0:	20 97       	sbiw	r28, 0x00	; 0
 2f2:	79 f0       	breq	.+30     	; 0x312 <SendList+0x30>
		while(!(UCSRA && (1<<UDRE)));
 2f4:	8b b1       	in	r24, 0x0b	; 11
 2f6:	88 23       	and	r24, r24
 2f8:	e9 f3       	breq	.-6      	; 0x2f4 <SendList+0x12>
		SendInteger(tempServo->angle);
 2fa:	88 81       	ld	r24, Y
 2fc:	99 81       	ldd	r25, Y+1	; 0x01
 2fe:	0e 94 1f 01 	call	0x23e	; 0x23e <SendInteger>
		SendInteger(tempServo->number);
 302:	8a 81       	ldd	r24, Y+2	; 0x02
 304:	9b 81       	ldd	r25, Y+3	; 0x03
 306:	0e 94 1f 01 	call	0x23e	; 0x23e <SendInteger>
		tempServo=tempServo->node ;
 30a:	0c 80       	ldd	r0, Y+4	; 0x04
 30c:	dd 81       	ldd	r29, Y+5	; 0x05
 30e:	c0 2d       	mov	r28, r0
 310:	ef cf       	rjmp	.-34     	; 0x2f0 <SendList+0xe>
		}
	return head;
}
 312:	c8 01       	movw	r24, r16
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	1f 91       	pop	r17
 31a:	0f 91       	pop	r16
 31c:	08 95       	ret

0000031e <USARTInit>:
}


void USARTInit()
{
	UCSRB |=(1<<RXEN)|(1<<TXEN)|(1<<RXCIE);					//Enabling the Receiver and Receiver Interrupt
 31e:	8a b1       	in	r24, 0x0a	; 10
 320:	88 69       	ori	r24, 0x98	; 152
 322:	8a b9       	out	0x0a, r24	; 10
	UCSRC |=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
 324:	80 b5       	in	r24, 0x20	; 32
 326:	86 68       	ori	r24, 0x86	; 134
 328:	80 bd       	out	0x20, r24	; 32
	UBRRL = baudRate;
 32a:	80 91 60 00 	lds	r24, 0x0060
 32e:	89 b9       	out	0x09, r24	; 9
	UBRRH &=~(1<<URSEL);
 330:	80 b5       	in	r24, 0x20	; 32
 332:	8f 77       	andi	r24, 0x7F	; 127
 334:	80 bd       	out	0x20, r24	; 32
	UBRRH = (baudRate<<8);
 336:	10 bc       	out	0x20, r1	; 32
 338:	08 95       	ret

0000033a <TimerInit>:
}

void TimerInit()
{
	//TCCR1A |=((0<<WGM11)|(0<<WGM10));	 //NO CHANGES IN THE TCCR1A REGISTER
	TCCR1B |=(1<<WGM12)|(1<<WGM13)|(1<<CS11);//CTC MODE(12) - TOP VALUE - ICR1 AND PRESCALAR => 8
 33a:	8e b5       	in	r24, 0x2e	; 46
 33c:	8a 61       	ori	r24, 0x1A	; 26
 33e:	8e bd       	out	0x2e, r24	; 46
	TIMSK |=(1<<TICIE1);			 //ENABLING INTERRUPT FOR TCNT1 REGISTER MATCHING ICR1
 340:	89 b7       	in	r24, 0x39	; 57
 342:	80 62       	ori	r24, 0x20	; 32
 344:	89 bf       	out	0x39, r24	; 57
 346:	08 95       	ret

00000348 <ServoPortInit>:
}

void ServoPortInit()
{
	DDRB = 0xff;
 348:	8f ef       	ldi	r24, 0xFF	; 255
 34a:	87 bb       	out	0x17, r24	; 23
	PORTB= 0xff;
 34c:	88 bb       	out	0x18, r24	; 24
 34e:	08 95       	ret

00000350 <__vector_6>:

//*****************************************************************************************************//
//	      									INTERRUPTS  								       	       //
//*****************************************************************************************************//
ISR(TIMER1_CAPT_vect)
{
 350:	1f 92       	push	r1
 352:	0f 92       	push	r0
 354:	0f b6       	in	r0, 0x3f	; 63
 356:	0f 92       	push	r0
 358:	11 24       	eor	r1, r1
 35a:	2f 93       	push	r18
 35c:	3f 93       	push	r19
 35e:	4f 93       	push	r20
 360:	5f 93       	push	r21
 362:	6f 93       	push	r22
 364:	7f 93       	push	r23
 366:	8f 93       	push	r24
 368:	9f 93       	push	r25
 36a:	af 93       	push	r26
 36c:	bf 93       	push	r27
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	ef 93       	push	r30
 374:	ff 93       	push	r31
	if(count==0){
 376:	80 91 82 00 	lds	r24, 0x0082
 37a:	90 91 83 00 	lds	r25, 0x0083
 37e:	89 2b       	or	r24, r25
 380:	e1 f4       	brne	.+56     	; 0x3ba <__vector_6+0x6a>
		//tempServoHead=servoHead;
		PORTB=0xff;
 382:	8f ef       	ldi	r24, 0xFF	; 255
 384:	88 bb       	out	0x18, r24	; 24
		ICR1=ICR1_BASE_VALUE+(tempServoHead->angle)*FACTOR;			//struct 0 angle
 386:	e0 91 8e 00 	lds	r30, 0x008E
 38a:	f0 91 8f 00 	lds	r31, 0x008F
 38e:	60 81       	ld	r22, Z
 390:	71 81       	ldd	r23, Z+1	; 0x01
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 1a 04 	call	0x834	; 0x834 <__floatunsisf>
 39a:	2f e8       	ldi	r18, 0x8F	; 143
 39c:	32 ec       	ldi	r19, 0xC2	; 194
 39e:	41 eb       	ldi	r20, 0xB1	; 177
 3a0:	51 e4       	ldi	r21, 0x41	; 65
 3a2:	0e 94 a8 04 	call	0x950	; 0x950 <__mulsf3>
 3a6:	20 e0       	ldi	r18, 0x00	; 0
 3a8:	30 e8       	ldi	r19, 0x80	; 128
 3aa:	49 e8       	ldi	r20, 0x89	; 137
 3ac:	54 e4       	ldi	r21, 0x44	; 68
 3ae:	0e 94 8a 03 	call	0x714	; 0x714 <__addsf3>
 3b2:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__fixunssfsi>
 3b6:	77 bd       	out	0x27, r23	; 39
 3b8:	66 bd       	out	0x26, r22	; 38
	}
	while(((tempServoHead->number==tempServoHead->node->number)&&count<=7)&&count>=1){
		clearbit(PORTB,((tempServoHead->number)-1));
 3ba:	61 e0       	ldi	r22, 0x01	; 1
 3bc:	70 e0       	ldi	r23, 0x00	; 0
	if(count==0){
		//tempServoHead=servoHead;
		PORTB=0xff;
		ICR1=ICR1_BASE_VALUE+(tempServoHead->angle)*FACTOR;			//struct 0 angle
	}
	while(((tempServoHead->number==tempServoHead->node->number)&&count<=7)&&count>=1){
 3be:	e0 91 8e 00 	lds	r30, 0x008E
 3c2:	f0 91 8f 00 	lds	r31, 0x008F
 3c6:	82 81       	ldd	r24, Z+2	; 0x02
 3c8:	93 81       	ldd	r25, Z+3	; 0x03
 3ca:	04 80       	ldd	r0, Z+4	; 0x04
 3cc:	f5 81       	ldd	r31, Z+5	; 0x05
 3ce:	e0 2d       	mov	r30, r0
 3d0:	42 81       	ldd	r20, Z+2	; 0x02
 3d2:	53 81       	ldd	r21, Z+3	; 0x03
 3d4:	20 91 82 00 	lds	r18, 0x0082
 3d8:	30 91 83 00 	lds	r19, 0x0083
 3dc:	84 17       	cp	r24, r20
 3de:	95 07       	cpc	r25, r21
 3e0:	91 f1       	breq	.+100    	; 0x446 <__vector_6+0xf6>
		clearbit(PORTB,((tempServoHead->number)-1));
		tempServoHead=tempServoHead->node;
		count++;
	}
	if((1<=count)&&(count<=7)){
 3e2:	21 50       	subi	r18, 0x01	; 1
 3e4:	31 09       	sbc	r19, r1
 3e6:	27 30       	cpi	r18, 0x07	; 7
 3e8:	31 05       	cpc	r19, r1
 3ea:	08 f0       	brcs	.+2      	; 0x3ee <__vector_6+0x9e>
 3ec:	52 c0       	rjmp	.+164    	; 0x492 <__vector_6+0x142>
		clearbit(PORTB,	((tempServoHead->number)-1));									//angle [i-1]
 3ee:	48 b3       	in	r20, 0x18	; 24
 3f0:	9c 01       	movw	r18, r24
 3f2:	21 50       	subi	r18, 0x01	; 1
 3f4:	31 09       	sbc	r19, r1
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	01 c0       	rjmp	.+2      	; 0x3fe <__vector_6+0xae>
 3fc:	88 0f       	add	r24, r24
 3fe:	2a 95       	dec	r18
 400:	ea f7       	brpl	.-6      	; 0x3fc <__vector_6+0xac>
 402:	80 95       	com	r24
 404:	84 23       	and	r24, r20
 406:	88 bb       	out	0x18, r24	; 24
		ICR1=(tempServoHead->node->angle-tempServoHead->angle)*FACTOR;
 408:	e0 91 8e 00 	lds	r30, 0x008E
 40c:	f0 91 8f 00 	lds	r31, 0x008F
 410:	c4 81       	ldd	r28, Z+4	; 0x04
 412:	d5 81       	ldd	r29, Z+5	; 0x05
 414:	68 81       	ld	r22, Y
 416:	79 81       	ldd	r23, Y+1	; 0x01
 418:	80 81       	ld	r24, Z
 41a:	91 81       	ldd	r25, Z+1	; 0x01
 41c:	68 1b       	sub	r22, r24
 41e:	79 0b       	sbc	r23, r25
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 1a 04 	call	0x834	; 0x834 <__floatunsisf>
 428:	2f e8       	ldi	r18, 0x8F	; 143
 42a:	32 ec       	ldi	r19, 0xC2	; 194
 42c:	41 eb       	ldi	r20, 0xB1	; 177
 42e:	51 e4       	ldi	r21, 0x41	; 65
 430:	0e 94 a8 04 	call	0x950	; 0x950 <__mulsf3>
 434:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__fixunssfsi>
 438:	77 bd       	out	0x27, r23	; 39
 43a:	66 bd       	out	0x26, r22	; 38
		tempServoHead=tempServoHead->node;
 43c:	d0 93 8f 00 	sts	0x008F, r29
 440:	c0 93 8e 00 	sts	0x008E, r28
 444:	26 c0       	rjmp	.+76     	; 0x492 <__vector_6+0x142>
	if(count==0){
		//tempServoHead=servoHead;
		PORTB=0xff;
		ICR1=ICR1_BASE_VALUE+(tempServoHead->angle)*FACTOR;			//struct 0 angle
	}
	while(((tempServoHead->number==tempServoHead->node->number)&&count<=7)&&count>=1){
 446:	a9 01       	movw	r20, r18
 448:	41 50       	subi	r20, 0x01	; 1
 44a:	51 09       	sbc	r21, r1
 44c:	47 30       	cpi	r20, 0x07	; 7
 44e:	51 05       	cpc	r21, r1
 450:	40 f6       	brcc	.-112    	; 0x3e2 <__vector_6+0x92>
		clearbit(PORTB,((tempServoHead->number)-1));
 452:	28 b3       	in	r18, 0x18	; 24
 454:	01 97       	sbiw	r24, 0x01	; 1
 456:	ab 01       	movw	r20, r22
 458:	02 c0       	rjmp	.+4      	; 0x45e <__vector_6+0x10e>
 45a:	44 0f       	add	r20, r20
 45c:	55 1f       	adc	r21, r21
 45e:	8a 95       	dec	r24
 460:	e2 f7       	brpl	.-8      	; 0x45a <__vector_6+0x10a>
 462:	ca 01       	movw	r24, r20
 464:	80 95       	com	r24
 466:	82 23       	and	r24, r18
 468:	88 bb       	out	0x18, r24	; 24
		tempServoHead=tempServoHead->node;
 46a:	e0 91 8e 00 	lds	r30, 0x008E
 46e:	f0 91 8f 00 	lds	r31, 0x008F
 472:	84 81       	ldd	r24, Z+4	; 0x04
 474:	95 81       	ldd	r25, Z+5	; 0x05
 476:	90 93 8f 00 	sts	0x008F, r25
 47a:	80 93 8e 00 	sts	0x008E, r24
		count++;
 47e:	80 91 82 00 	lds	r24, 0x0082
 482:	90 91 83 00 	lds	r25, 0x0083
 486:	01 96       	adiw	r24, 0x01	; 1
 488:	90 93 83 00 	sts	0x0083, r25
 48c:	80 93 82 00 	sts	0x0082, r24
 490:	96 cf       	rjmp	.-212    	; 0x3be <__vector_6+0x6e>
		clearbit(PORTB,	((tempServoHead->number)-1));									//angle [i-1]
		ICR1=(tempServoHead->node->angle-tempServoHead->angle)*FACTOR;
		tempServoHead=tempServoHead->node;
		//Introduce a case for Zero Condition Angle example 2 or more than 2 consecutive angle can have same value. so the difference between the time will be apporximately zero.
	}
	if(count>7){
 492:	80 91 82 00 	lds	r24, 0x0082
 496:	90 91 83 00 	lds	r25, 0x0083
 49a:	08 97       	sbiw	r24, 0x08	; 8
 49c:	f4 f1       	brlt	.+124    	; 0x51a <__vector_6+0x1ca>
		clearbit(PORTB,((tempServoHead->number)-1));
 49e:	48 b3       	in	r20, 0x18	; 24
 4a0:	e0 91 8e 00 	lds	r30, 0x008E
 4a4:	f0 91 8f 00 	lds	r31, 0x008F
 4a8:	22 81       	ldd	r18, Z+2	; 0x02
 4aa:	33 81       	ldd	r19, Z+3	; 0x03
 4ac:	21 50       	subi	r18, 0x01	; 1
 4ae:	31 09       	sbc	r19, r1
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	01 c0       	rjmp	.+2      	; 0x4b8 <__vector_6+0x168>
 4b6:	88 0f       	add	r24, r24
 4b8:	2a 95       	dec	r18
 4ba:	ea f7       	brpl	.-6      	; 0x4b6 <__vector_6+0x166>
 4bc:	80 95       	com	r24
 4be:	84 23       	and	r24, r20
 4c0:	88 bb       	out	0x18, r24	; 24
		ICR1=ICR1_TOP_VALUE-ICR1_BASE_VALUE-(tempServoHead->angle)*FACTOR;
 4c2:	e0 91 8e 00 	lds	r30, 0x008E
 4c6:	f0 91 8f 00 	lds	r31, 0x008F
 4ca:	60 81       	ld	r22, Z
 4cc:	71 81       	ldd	r23, Z+1	; 0x01
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	0e 94 1a 04 	call	0x834	; 0x834 <__floatunsisf>
 4d6:	2f e8       	ldi	r18, 0x8F	; 143
 4d8:	32 ec       	ldi	r19, 0xC2	; 194
 4da:	41 eb       	ldi	r20, 0xB1	; 177
 4dc:	51 e4       	ldi	r21, 0x41	; 65
 4de:	0e 94 a8 04 	call	0x950	; 0x950 <__mulsf3>
 4e2:	9b 01       	movw	r18, r22
 4e4:	ac 01       	movw	r20, r24
 4e6:	60 e0       	ldi	r22, 0x00	; 0
 4e8:	70 e3       	ldi	r23, 0x30	; 48
 4ea:	85 e3       	ldi	r24, 0x35	; 53
 4ec:	95 e4       	ldi	r25, 0x45	; 69
 4ee:	0e 94 89 03 	call	0x712	; 0x712 <__subsf3>
 4f2:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__fixunssfsi>
 4f6:	77 bd       	out	0x27, r23	; 39
 4f8:	66 bd       	out	0x26, r22	; 38
		tempServoHead=*servoSwitchListPtr;
 4fa:	e0 91 84 00 	lds	r30, 0x0084
 4fe:	f0 91 85 00 	lds	r31, 0x0085
 502:	80 81       	ld	r24, Z
 504:	91 81       	ldd	r25, Z+1	; 0x01
 506:	90 93 8f 00 	sts	0x008F, r25
 50a:	80 93 8e 00 	sts	0x008E, r24
		//tempServoHead=servoHead;
		count=-1;
 50e:	8f ef       	ldi	r24, 0xFF	; 255
 510:	9f ef       	ldi	r25, 0xFF	; 255
 512:	90 93 83 00 	sts	0x0083, r25
 516:	80 93 82 00 	sts	0x0082, r24
	}
	count++;
 51a:	80 91 82 00 	lds	r24, 0x0082
 51e:	90 91 83 00 	lds	r25, 0x0083
 522:	01 96       	adiw	r24, 0x01	; 1
 524:	90 93 83 00 	sts	0x0083, r25
 528:	80 93 82 00 	sts	0x0082, r24
	TCNT1=0;
 52c:	1d bc       	out	0x2d, r1	; 45
 52e:	1c bc       	out	0x2c, r1	; 44
}
 530:	ff 91       	pop	r31
 532:	ef 91       	pop	r30
 534:	df 91       	pop	r29
 536:	cf 91       	pop	r28
 538:	bf 91       	pop	r27
 53a:	af 91       	pop	r26
 53c:	9f 91       	pop	r25
 53e:	8f 91       	pop	r24
 540:	7f 91       	pop	r23
 542:	6f 91       	pop	r22
 544:	5f 91       	pop	r21
 546:	4f 91       	pop	r20
 548:	3f 91       	pop	r19
 54a:	2f 91       	pop	r18
 54c:	0f 90       	pop	r0
 54e:	0f be       	out	0x3f, r0	; 63
 550:	0f 90       	pop	r0
 552:	1f 90       	pop	r1
 554:	18 95       	reti

00000556 <__vector_13>:

ISR(USART_RXC_vect)
{
 556:	1f 92       	push	r1
 558:	0f 92       	push	r0
 55a:	0f b6       	in	r0, 0x3f	; 63
 55c:	0f 92       	push	r0
 55e:	11 24       	eor	r1, r1
 560:	8f 93       	push	r24
 562:	9f 93       	push	r25
 564:	ef 93       	push	r30
 566:	ff 93       	push	r31
	while(!(UCSRA &(1<<RXC)));	//For SAFETY Measure
 568:	5f 9b       	sbis	0x0b, 7	; 11
 56a:	fe cf       	rjmp	.-4      	; 0x568 <__vector_13+0x12>
	*tempDataPtr=UDR;
 56c:	e0 91 8a 00 	lds	r30, 0x008A
 570:	f0 91 8b 00 	lds	r31, 0x008B
 574:	8c b1       	in	r24, 0x0c	; 12
 576:	80 83       	st	Z, r24
	tempDataPtr++;
 578:	e0 91 8a 00 	lds	r30, 0x008A
 57c:	f0 91 8b 00 	lds	r31, 0x008B
 580:	cf 01       	movw	r24, r30
 582:	01 96       	adiw	r24, 0x01	; 1
 584:	90 93 8b 00 	sts	0x008B, r25
 588:	80 93 8a 00 	sts	0x008A, r24
	if(*(tempDataPtr-1)==END_OF_SIGNAL){	//STOP CONDITION
 58c:	80 81       	ld	r24, Z
 58e:	8d 30       	cpi	r24, 0x0D	; 13
 590:	31 f4       	brne	.+12     	; 0x59e <__vector_13+0x48>
		arrangeSignalFlag=1;	//Flag will activate the processing of received data//Arranging
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	90 93 7b 00 	sts	0x007B, r25
 59a:	80 93 7a 00 	sts	0x007A, r24
	}
}
 59e:	ff 91       	pop	r31
 5a0:	ef 91       	pop	r30
 5a2:	9f 91       	pop	r25
 5a4:	8f 91       	pop	r24
 5a6:	0f 90       	pop	r0
 5a8:	0f be       	out	0x3f, r0	; 63
 5aa:	0f 90       	pop	r0
 5ac:	1f 90       	pop	r1
 5ae:	18 95       	reti

000005b0 <main>:
	return head;
}

//ALWAYS KEEP A DELAY OF ABOUT 2MS OR 3MS (MINIMUM) BETWEEN THE TRANSMITTION OF 2 CONSECUTIVE DATA//
int main(void)
{
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
 5b4:	00 d0       	rcall	.+0      	; 0x5b6 <main+0x6>
 5b6:	00 d0       	rcall	.+0      	; 0x5b8 <main+0x8>
 5b8:	cd b7       	in	r28, 0x3d	; 61
 5ba:	de b7       	in	r29, 0x3e	; 62
	tempDataPtr=tempData;
 5bc:	8c e7       	ldi	r24, 0x7C	; 124
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	90 93 8b 00 	sts	0x008B, r25
 5c4:	80 93 8a 00 	sts	0x008A, r24
	servoList *servoNodeHead;
	servoList *servoNodeHeadDup;
	servoNodeHead=CreateList();
 5c8:	0e 94 49 00 	call	0x92	; 0x92 <CreateList>
 5cc:	9c 83       	std	Y+4, r25	; 0x04
 5ce:	8b 83       	std	Y+3, r24	; 0x03
	servoNodeHeadDup=CreateList();
 5d0:	0e 94 49 00 	call	0x92	; 0x92 <CreateList>
 5d4:	9a 83       	std	Y+2, r25	; 0x02
 5d6:	89 83       	std	Y+1, r24	; 0x01
	servoSwitchListPtr=&servoNodeHead;
 5d8:	ce 01       	movw	r24, r28
 5da:	03 96       	adiw	r24, 0x03	; 3
 5dc:	90 93 85 00 	sts	0x0085, r25
 5e0:	80 93 84 00 	sts	0x0084, r24
	//servoHead=tempServoHead=servoNodeHead;
	tempServoHead=*servoSwitchListPtr;
 5e4:	8b 81       	ldd	r24, Y+3	; 0x03
 5e6:	9c 81       	ldd	r25, Y+4	; 0x04
 5e8:	90 93 8f 00 	sts	0x008F, r25
 5ec:	80 93 8e 00 	sts	0x008E, r24
	servoSwitch=(servoList*)malloc(sizeof(servoList));
 5f0:	86 e0       	ldi	r24, 0x06	; 6
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	0e 94 0b 05 	call	0xa16	; 0xa16 <malloc>
 5f8:	90 93 87 00 	sts	0x0087, r25
 5fc:	80 93 86 00 	sts	0x0086, r24
	servoSwitchDup=(servoList*)malloc(sizeof(servoList));
 600:	86 e0       	ldi	r24, 0x06	; 6
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	0e 94 0b 05 	call	0xa16	; 0xa16 <malloc>
 608:	90 93 8d 00 	sts	0x008D, r25
 60c:	80 93 8c 00 	sts	0x008C, r24
	servoSwitchPtr=&servoSwitch;
 610:	86 e8       	ldi	r24, 0x86	; 134
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	90 93 91 00 	sts	0x0091, r25
 618:	80 93 90 00 	sts	0x0090, r24
	servoSwitchPtrDup=&servoSwitchDup;
 61c:	8c e8       	ldi	r24, 0x8C	; 140
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	90 93 93 00 	sts	0x0093, r25
 624:	80 93 92 00 	sts	0x0092, r24
	
	clearbit(UCSRA,RXC);
 628:	5f 98       	cbi	0x0b, 7	; 11
	USARTInit();
 62a:	0e 94 8f 01 	call	0x31e	; 0x31e <USARTInit>
	ServoPortInit();
 62e:	0e 94 a4 01 	call	0x348	; 0x348 <ServoPortInit>
	TimerInit();
 632:	0e 94 9d 01 	call	0x33a	; 0x33a <TimerInit>
	TCNT1=0;
 636:	1d bc       	out	0x2d, r1	; 45
 638:	1c bc       	out	0x2c, r1	; 44
	sei();
 63a:	78 94       	sei
 63c:	8e 01       	movw	r16, r28
 63e:	0d 5f       	subi	r16, 0xFD	; 253
 640:	1f 4f       	sbci	r17, 0xFF	; 255
				SendInteger((*servoSwitchPtr)->number);
				SendInteger((*servoSwitchPtr)->angle);
				*/
				if(servoSwitchListPtr==&servoNodeHead){
					servoNodeHeadDup=ArrangeAngle(*servoSwitchPtrDup,servoNodeHeadDup,0);
					servoSwitchListPtr=&servoNodeHeadDup;
 642:	ce 01       	movw	r24, r28
 644:	01 96       	adiw	r24, 0x01	; 1
 646:	7c 01       	movw	r14, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 648:	95 e0       	ldi	r25, 0x05	; 5
 64a:	9a 95       	dec	r25
 64c:	f1 f7       	brne	.-4      	; 0x64a <main+0x9a>
 64e:	00 00       	nop
	TCNT1=0;
	sei();
	while(1){
			//Without Delay the below loop is not executing.
			_delay_us(1); 
			if(arrangeSignalFlag==1){
 650:	80 91 7a 00 	lds	r24, 0x007A
 654:	90 91 7b 00 	lds	r25, 0x007B
 658:	01 97       	sbiw	r24, 0x01	; 1
 65a:	b1 f7       	brne	.-20     	; 0x648 <main+0x98>
				PrepareAddToList(tempData);
 65c:	8c e7       	ldi	r24, 0x7C	; 124
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	0e 94 3c 01 	call	0x278	; 0x278 <PrepareAddToList>
				servoNodeHead=ArrangeAngle(servoSwitch,servoNodeHead,1);
				SendList(servoNodeHead);
				SendInteger((*servoSwitchPtr)->number);
				SendInteger((*servoSwitchPtr)->angle);
				*/
				if(servoSwitchListPtr==&servoNodeHead){
 664:	80 91 84 00 	lds	r24, 0x0084
 668:	90 91 85 00 	lds	r25, 0x0085
 66c:	80 17       	cp	r24, r16
 66e:	91 07       	cpc	r25, r17
 670:	09 f5       	brne	.+66     	; 0x6b4 <main+0x104>
					servoNodeHeadDup=ArrangeAngle(*servoSwitchPtrDup,servoNodeHeadDup,0);
 672:	69 81       	ldd	r22, Y+1	; 0x01
 674:	7a 81       	ldd	r23, Y+2	; 0x02
 676:	e0 91 92 00 	lds	r30, 0x0092
 67a:	f0 91 93 00 	lds	r31, 0x0093
 67e:	40 e0       	ldi	r20, 0x00	; 0
 680:	50 e0       	ldi	r21, 0x00	; 0
 682:	80 81       	ld	r24, Z
 684:	91 81       	ldd	r25, Z+1	; 0x01
 686:	0e 94 84 00 	call	0x108	; 0x108 <ArrangeAngle>
 68a:	9a 83       	std	Y+2, r25	; 0x02
 68c:	89 83       	std	Y+1, r24	; 0x01
					servoSwitchListPtr=&servoNodeHeadDup;
 68e:	f0 92 85 00 	sts	0x0085, r15
 692:	e0 92 84 00 	sts	0x0084, r14
					servoNodeHead=ArrangeAngle(*servoSwitchPtr,servoNodeHead,1);
 696:	6b 81       	ldd	r22, Y+3	; 0x03
 698:	7c 81       	ldd	r23, Y+4	; 0x04
 69a:	e0 91 90 00 	lds	r30, 0x0090
 69e:	f0 91 91 00 	lds	r31, 0x0091
 6a2:	41 e0       	ldi	r20, 0x01	; 1
 6a4:	50 e0       	ldi	r21, 0x00	; 0
 6a6:	80 81       	ld	r24, Z
 6a8:	91 81       	ldd	r25, Z+1	; 0x01
 6aa:	0e 94 84 00 	call	0x108	; 0x108 <ArrangeAngle>
 6ae:	9c 83       	std	Y+4, r25	; 0x04
 6b0:	8b 83       	std	Y+3, r24	; 0x03
 6b2:	20 c0       	rjmp	.+64     	; 0x6f4 <main+0x144>
				}
				else{
					servoNodeHead=ArrangeAngle(*servoSwitchPtr,servoNodeHead,1);
 6b4:	6b 81       	ldd	r22, Y+3	; 0x03
 6b6:	7c 81       	ldd	r23, Y+4	; 0x04
 6b8:	e0 91 90 00 	lds	r30, 0x0090
 6bc:	f0 91 91 00 	lds	r31, 0x0091
 6c0:	41 e0       	ldi	r20, 0x01	; 1
 6c2:	50 e0       	ldi	r21, 0x00	; 0
 6c4:	80 81       	ld	r24, Z
 6c6:	91 81       	ldd	r25, Z+1	; 0x01
 6c8:	0e 94 84 00 	call	0x108	; 0x108 <ArrangeAngle>
 6cc:	9c 83       	std	Y+4, r25	; 0x04
 6ce:	8b 83       	std	Y+3, r24	; 0x03
					servoSwitchListPtr=&servoNodeHead;
 6d0:	10 93 85 00 	sts	0x0085, r17
 6d4:	00 93 84 00 	sts	0x0084, r16
					servoNodeHeadDup=ArrangeAngle(*servoSwitchPtrDup,servoNodeHeadDup,0);
 6d8:	69 81       	ldd	r22, Y+1	; 0x01
 6da:	7a 81       	ldd	r23, Y+2	; 0x02
 6dc:	e0 91 92 00 	lds	r30, 0x0092
 6e0:	f0 91 93 00 	lds	r31, 0x0093
 6e4:	40 e0       	ldi	r20, 0x00	; 0
 6e6:	50 e0       	ldi	r21, 0x00	; 0
 6e8:	80 81       	ld	r24, Z
 6ea:	91 81       	ldd	r25, Z+1	; 0x01
 6ec:	0e 94 84 00 	call	0x108	; 0x108 <ArrangeAngle>
 6f0:	9a 83       	std	Y+2, r25	; 0x02
 6f2:	89 83       	std	Y+1, r24	; 0x01
				}
				tempDataPtr=tempData;
 6f4:	8c e7       	ldi	r24, 0x7C	; 124
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	90 93 8b 00 	sts	0x008B, r25
 6fc:	80 93 8a 00 	sts	0x008A, r24
				arrangeSignalFlag=0;
 700:	10 92 7b 00 	sts	0x007B, r1
 704:	10 92 7a 00 	sts	0x007A, r1
				count=0;
 708:	10 92 83 00 	sts	0x0083, r1
 70c:	10 92 82 00 	sts	0x0082, r1
 710:	9b cf       	rjmp	.-202    	; 0x648 <main+0x98>

00000712 <__subsf3>:
 712:	50 58       	subi	r21, 0x80	; 128

00000714 <__addsf3>:
 714:	bb 27       	eor	r27, r27
 716:	aa 27       	eor	r26, r26
 718:	0e d0       	rcall	.+28     	; 0x736 <__addsf3x>
 71a:	e0 c0       	rjmp	.+448    	; 0x8dc <__fp_round>
 71c:	d1 d0       	rcall	.+418    	; 0x8c0 <__fp_pscA>
 71e:	30 f0       	brcs	.+12     	; 0x72c <__addsf3+0x18>
 720:	d6 d0       	rcall	.+428    	; 0x8ce <__fp_pscB>
 722:	20 f0       	brcs	.+8      	; 0x72c <__addsf3+0x18>
 724:	31 f4       	brne	.+12     	; 0x732 <__addsf3+0x1e>
 726:	9f 3f       	cpi	r25, 0xFF	; 255
 728:	11 f4       	brne	.+4      	; 0x72e <__addsf3+0x1a>
 72a:	1e f4       	brtc	.+6      	; 0x732 <__addsf3+0x1e>
 72c:	c6 c0       	rjmp	.+396    	; 0x8ba <__fp_nan>
 72e:	0e f4       	brtc	.+2      	; 0x732 <__addsf3+0x1e>
 730:	e0 95       	com	r30
 732:	e7 fb       	bst	r30, 7
 734:	bc c0       	rjmp	.+376    	; 0x8ae <__fp_inf>

00000736 <__addsf3x>:
 736:	e9 2f       	mov	r30, r25
 738:	e2 d0       	rcall	.+452    	; 0x8fe <__fp_split3>
 73a:	80 f3       	brcs	.-32     	; 0x71c <__addsf3+0x8>
 73c:	ba 17       	cp	r27, r26
 73e:	62 07       	cpc	r22, r18
 740:	73 07       	cpc	r23, r19
 742:	84 07       	cpc	r24, r20
 744:	95 07       	cpc	r25, r21
 746:	18 f0       	brcs	.+6      	; 0x74e <__addsf3x+0x18>
 748:	71 f4       	brne	.+28     	; 0x766 <__addsf3x+0x30>
 74a:	9e f5       	brtc	.+102    	; 0x7b2 <__addsf3x+0x7c>
 74c:	fa c0       	rjmp	.+500    	; 0x942 <__fp_zero>
 74e:	0e f4       	brtc	.+2      	; 0x752 <__addsf3x+0x1c>
 750:	e0 95       	com	r30
 752:	0b 2e       	mov	r0, r27
 754:	ba 2f       	mov	r27, r26
 756:	a0 2d       	mov	r26, r0
 758:	0b 01       	movw	r0, r22
 75a:	b9 01       	movw	r22, r18
 75c:	90 01       	movw	r18, r0
 75e:	0c 01       	movw	r0, r24
 760:	ca 01       	movw	r24, r20
 762:	a0 01       	movw	r20, r0
 764:	11 24       	eor	r1, r1
 766:	ff 27       	eor	r31, r31
 768:	59 1b       	sub	r21, r25
 76a:	99 f0       	breq	.+38     	; 0x792 <__addsf3x+0x5c>
 76c:	59 3f       	cpi	r21, 0xF9	; 249
 76e:	50 f4       	brcc	.+20     	; 0x784 <__addsf3x+0x4e>
 770:	50 3e       	cpi	r21, 0xE0	; 224
 772:	68 f1       	brcs	.+90     	; 0x7ce <__addsf3x+0x98>
 774:	1a 16       	cp	r1, r26
 776:	f0 40       	sbci	r31, 0x00	; 0
 778:	a2 2f       	mov	r26, r18
 77a:	23 2f       	mov	r18, r19
 77c:	34 2f       	mov	r19, r20
 77e:	44 27       	eor	r20, r20
 780:	58 5f       	subi	r21, 0xF8	; 248
 782:	f3 cf       	rjmp	.-26     	; 0x76a <__addsf3x+0x34>
 784:	46 95       	lsr	r20
 786:	37 95       	ror	r19
 788:	27 95       	ror	r18
 78a:	a7 95       	ror	r26
 78c:	f0 40       	sbci	r31, 0x00	; 0
 78e:	53 95       	inc	r21
 790:	c9 f7       	brne	.-14     	; 0x784 <__addsf3x+0x4e>
 792:	7e f4       	brtc	.+30     	; 0x7b2 <__addsf3x+0x7c>
 794:	1f 16       	cp	r1, r31
 796:	ba 0b       	sbc	r27, r26
 798:	62 0b       	sbc	r22, r18
 79a:	73 0b       	sbc	r23, r19
 79c:	84 0b       	sbc	r24, r20
 79e:	ba f0       	brmi	.+46     	; 0x7ce <__addsf3x+0x98>
 7a0:	91 50       	subi	r25, 0x01	; 1
 7a2:	a1 f0       	breq	.+40     	; 0x7cc <__addsf3x+0x96>
 7a4:	ff 0f       	add	r31, r31
 7a6:	bb 1f       	adc	r27, r27
 7a8:	66 1f       	adc	r22, r22
 7aa:	77 1f       	adc	r23, r23
 7ac:	88 1f       	adc	r24, r24
 7ae:	c2 f7       	brpl	.-16     	; 0x7a0 <__addsf3x+0x6a>
 7b0:	0e c0       	rjmp	.+28     	; 0x7ce <__addsf3x+0x98>
 7b2:	ba 0f       	add	r27, r26
 7b4:	62 1f       	adc	r22, r18
 7b6:	73 1f       	adc	r23, r19
 7b8:	84 1f       	adc	r24, r20
 7ba:	48 f4       	brcc	.+18     	; 0x7ce <__addsf3x+0x98>
 7bc:	87 95       	ror	r24
 7be:	77 95       	ror	r23
 7c0:	67 95       	ror	r22
 7c2:	b7 95       	ror	r27
 7c4:	f7 95       	ror	r31
 7c6:	9e 3f       	cpi	r25, 0xFE	; 254
 7c8:	08 f0       	brcs	.+2      	; 0x7cc <__addsf3x+0x96>
 7ca:	b3 cf       	rjmp	.-154    	; 0x732 <__addsf3+0x1e>
 7cc:	93 95       	inc	r25
 7ce:	88 0f       	add	r24, r24
 7d0:	08 f0       	brcs	.+2      	; 0x7d4 <__addsf3x+0x9e>
 7d2:	99 27       	eor	r25, r25
 7d4:	ee 0f       	add	r30, r30
 7d6:	97 95       	ror	r25
 7d8:	87 95       	ror	r24
 7da:	08 95       	ret

000007dc <__fixunssfsi>:
 7dc:	98 d0       	rcall	.+304    	; 0x90e <__fp_splitA>
 7de:	88 f0       	brcs	.+34     	; 0x802 <__fixunssfsi+0x26>
 7e0:	9f 57       	subi	r25, 0x7F	; 127
 7e2:	90 f0       	brcs	.+36     	; 0x808 <__fixunssfsi+0x2c>
 7e4:	b9 2f       	mov	r27, r25
 7e6:	99 27       	eor	r25, r25
 7e8:	b7 51       	subi	r27, 0x17	; 23
 7ea:	a0 f0       	brcs	.+40     	; 0x814 <__fixunssfsi+0x38>
 7ec:	d1 f0       	breq	.+52     	; 0x822 <__fixunssfsi+0x46>
 7ee:	66 0f       	add	r22, r22
 7f0:	77 1f       	adc	r23, r23
 7f2:	88 1f       	adc	r24, r24
 7f4:	99 1f       	adc	r25, r25
 7f6:	1a f0       	brmi	.+6      	; 0x7fe <__fixunssfsi+0x22>
 7f8:	ba 95       	dec	r27
 7fa:	c9 f7       	brne	.-14     	; 0x7ee <__fixunssfsi+0x12>
 7fc:	12 c0       	rjmp	.+36     	; 0x822 <__fixunssfsi+0x46>
 7fe:	b1 30       	cpi	r27, 0x01	; 1
 800:	81 f0       	breq	.+32     	; 0x822 <__fixunssfsi+0x46>
 802:	9f d0       	rcall	.+318    	; 0x942 <__fp_zero>
 804:	b1 e0       	ldi	r27, 0x01	; 1
 806:	08 95       	ret
 808:	9c c0       	rjmp	.+312    	; 0x942 <__fp_zero>
 80a:	67 2f       	mov	r22, r23
 80c:	78 2f       	mov	r23, r24
 80e:	88 27       	eor	r24, r24
 810:	b8 5f       	subi	r27, 0xF8	; 248
 812:	39 f0       	breq	.+14     	; 0x822 <__fixunssfsi+0x46>
 814:	b9 3f       	cpi	r27, 0xF9	; 249
 816:	cc f3       	brlt	.-14     	; 0x80a <__fixunssfsi+0x2e>
 818:	86 95       	lsr	r24
 81a:	77 95       	ror	r23
 81c:	67 95       	ror	r22
 81e:	b3 95       	inc	r27
 820:	d9 f7       	brne	.-10     	; 0x818 <__fixunssfsi+0x3c>
 822:	3e f4       	brtc	.+14     	; 0x832 <__fixunssfsi+0x56>
 824:	90 95       	com	r25
 826:	80 95       	com	r24
 828:	70 95       	com	r23
 82a:	61 95       	neg	r22
 82c:	7f 4f       	sbci	r23, 0xFF	; 255
 82e:	8f 4f       	sbci	r24, 0xFF	; 255
 830:	9f 4f       	sbci	r25, 0xFF	; 255
 832:	08 95       	ret

00000834 <__floatunsisf>:
 834:	e8 94       	clt
 836:	09 c0       	rjmp	.+18     	; 0x84a <__floatsisf+0x12>

00000838 <__floatsisf>:
 838:	97 fb       	bst	r25, 7
 83a:	3e f4       	brtc	.+14     	; 0x84a <__floatsisf+0x12>
 83c:	90 95       	com	r25
 83e:	80 95       	com	r24
 840:	70 95       	com	r23
 842:	61 95       	neg	r22
 844:	7f 4f       	sbci	r23, 0xFF	; 255
 846:	8f 4f       	sbci	r24, 0xFF	; 255
 848:	9f 4f       	sbci	r25, 0xFF	; 255
 84a:	99 23       	and	r25, r25
 84c:	a9 f0       	breq	.+42     	; 0x878 <__stack+0x19>
 84e:	f9 2f       	mov	r31, r25
 850:	96 e9       	ldi	r25, 0x96	; 150
 852:	bb 27       	eor	r27, r27
 854:	93 95       	inc	r25
 856:	f6 95       	lsr	r31
 858:	87 95       	ror	r24
 85a:	77 95       	ror	r23
 85c:	67 95       	ror	r22
 85e:	b7 95       	ror	r27
 860:	f1 11       	cpse	r31, r1
 862:	f8 cf       	rjmp	.-16     	; 0x854 <__floatsisf+0x1c>
 864:	fa f4       	brpl	.+62     	; 0x8a4 <__stack+0x45>
 866:	bb 0f       	add	r27, r27
 868:	11 f4       	brne	.+4      	; 0x86e <__stack+0xf>
 86a:	60 ff       	sbrs	r22, 0
 86c:	1b c0       	rjmp	.+54     	; 0x8a4 <__stack+0x45>
 86e:	6f 5f       	subi	r22, 0xFF	; 255
 870:	7f 4f       	sbci	r23, 0xFF	; 255
 872:	8f 4f       	sbci	r24, 0xFF	; 255
 874:	9f 4f       	sbci	r25, 0xFF	; 255
 876:	16 c0       	rjmp	.+44     	; 0x8a4 <__stack+0x45>
 878:	88 23       	and	r24, r24
 87a:	11 f0       	breq	.+4      	; 0x880 <__stack+0x21>
 87c:	96 e9       	ldi	r25, 0x96	; 150
 87e:	11 c0       	rjmp	.+34     	; 0x8a2 <__stack+0x43>
 880:	77 23       	and	r23, r23
 882:	21 f0       	breq	.+8      	; 0x88c <__stack+0x2d>
 884:	9e e8       	ldi	r25, 0x8E	; 142
 886:	87 2f       	mov	r24, r23
 888:	76 2f       	mov	r23, r22
 88a:	05 c0       	rjmp	.+10     	; 0x896 <__stack+0x37>
 88c:	66 23       	and	r22, r22
 88e:	71 f0       	breq	.+28     	; 0x8ac <__stack+0x4d>
 890:	96 e8       	ldi	r25, 0x86	; 134
 892:	86 2f       	mov	r24, r22
 894:	70 e0       	ldi	r23, 0x00	; 0
 896:	60 e0       	ldi	r22, 0x00	; 0
 898:	2a f0       	brmi	.+10     	; 0x8a4 <__stack+0x45>
 89a:	9a 95       	dec	r25
 89c:	66 0f       	add	r22, r22
 89e:	77 1f       	adc	r23, r23
 8a0:	88 1f       	adc	r24, r24
 8a2:	da f7       	brpl	.-10     	; 0x89a <__stack+0x3b>
 8a4:	88 0f       	add	r24, r24
 8a6:	96 95       	lsr	r25
 8a8:	87 95       	ror	r24
 8aa:	97 f9       	bld	r25, 7
 8ac:	08 95       	ret

000008ae <__fp_inf>:
 8ae:	97 f9       	bld	r25, 7
 8b0:	9f 67       	ori	r25, 0x7F	; 127
 8b2:	80 e8       	ldi	r24, 0x80	; 128
 8b4:	70 e0       	ldi	r23, 0x00	; 0
 8b6:	60 e0       	ldi	r22, 0x00	; 0
 8b8:	08 95       	ret

000008ba <__fp_nan>:
 8ba:	9f ef       	ldi	r25, 0xFF	; 255
 8bc:	80 ec       	ldi	r24, 0xC0	; 192
 8be:	08 95       	ret

000008c0 <__fp_pscA>:
 8c0:	00 24       	eor	r0, r0
 8c2:	0a 94       	dec	r0
 8c4:	16 16       	cp	r1, r22
 8c6:	17 06       	cpc	r1, r23
 8c8:	18 06       	cpc	r1, r24
 8ca:	09 06       	cpc	r0, r25
 8cc:	08 95       	ret

000008ce <__fp_pscB>:
 8ce:	00 24       	eor	r0, r0
 8d0:	0a 94       	dec	r0
 8d2:	12 16       	cp	r1, r18
 8d4:	13 06       	cpc	r1, r19
 8d6:	14 06       	cpc	r1, r20
 8d8:	05 06       	cpc	r0, r21
 8da:	08 95       	ret

000008dc <__fp_round>:
 8dc:	09 2e       	mov	r0, r25
 8de:	03 94       	inc	r0
 8e0:	00 0c       	add	r0, r0
 8e2:	11 f4       	brne	.+4      	; 0x8e8 <__fp_round+0xc>
 8e4:	88 23       	and	r24, r24
 8e6:	52 f0       	brmi	.+20     	; 0x8fc <__fp_round+0x20>
 8e8:	bb 0f       	add	r27, r27
 8ea:	40 f4       	brcc	.+16     	; 0x8fc <__fp_round+0x20>
 8ec:	bf 2b       	or	r27, r31
 8ee:	11 f4       	brne	.+4      	; 0x8f4 <__fp_round+0x18>
 8f0:	60 ff       	sbrs	r22, 0
 8f2:	04 c0       	rjmp	.+8      	; 0x8fc <__fp_round+0x20>
 8f4:	6f 5f       	subi	r22, 0xFF	; 255
 8f6:	7f 4f       	sbci	r23, 0xFF	; 255
 8f8:	8f 4f       	sbci	r24, 0xFF	; 255
 8fa:	9f 4f       	sbci	r25, 0xFF	; 255
 8fc:	08 95       	ret

000008fe <__fp_split3>:
 8fe:	57 fd       	sbrc	r21, 7
 900:	90 58       	subi	r25, 0x80	; 128
 902:	44 0f       	add	r20, r20
 904:	55 1f       	adc	r21, r21
 906:	59 f0       	breq	.+22     	; 0x91e <__fp_splitA+0x10>
 908:	5f 3f       	cpi	r21, 0xFF	; 255
 90a:	71 f0       	breq	.+28     	; 0x928 <__fp_splitA+0x1a>
 90c:	47 95       	ror	r20

0000090e <__fp_splitA>:
 90e:	88 0f       	add	r24, r24
 910:	97 fb       	bst	r25, 7
 912:	99 1f       	adc	r25, r25
 914:	61 f0       	breq	.+24     	; 0x92e <__fp_splitA+0x20>
 916:	9f 3f       	cpi	r25, 0xFF	; 255
 918:	79 f0       	breq	.+30     	; 0x938 <__fp_splitA+0x2a>
 91a:	87 95       	ror	r24
 91c:	08 95       	ret
 91e:	12 16       	cp	r1, r18
 920:	13 06       	cpc	r1, r19
 922:	14 06       	cpc	r1, r20
 924:	55 1f       	adc	r21, r21
 926:	f2 cf       	rjmp	.-28     	; 0x90c <__fp_split3+0xe>
 928:	46 95       	lsr	r20
 92a:	f1 df       	rcall	.-30     	; 0x90e <__fp_splitA>
 92c:	08 c0       	rjmp	.+16     	; 0x93e <__fp_splitA+0x30>
 92e:	16 16       	cp	r1, r22
 930:	17 06       	cpc	r1, r23
 932:	18 06       	cpc	r1, r24
 934:	99 1f       	adc	r25, r25
 936:	f1 cf       	rjmp	.-30     	; 0x91a <__fp_splitA+0xc>
 938:	86 95       	lsr	r24
 93a:	71 05       	cpc	r23, r1
 93c:	61 05       	cpc	r22, r1
 93e:	08 94       	sec
 940:	08 95       	ret

00000942 <__fp_zero>:
 942:	e8 94       	clt

00000944 <__fp_szero>:
 944:	bb 27       	eor	r27, r27
 946:	66 27       	eor	r22, r22
 948:	77 27       	eor	r23, r23
 94a:	cb 01       	movw	r24, r22
 94c:	97 f9       	bld	r25, 7
 94e:	08 95       	ret

00000950 <__mulsf3>:
 950:	0b d0       	rcall	.+22     	; 0x968 <__mulsf3x>
 952:	c4 cf       	rjmp	.-120    	; 0x8dc <__fp_round>
 954:	b5 df       	rcall	.-150    	; 0x8c0 <__fp_pscA>
 956:	28 f0       	brcs	.+10     	; 0x962 <__mulsf3+0x12>
 958:	ba df       	rcall	.-140    	; 0x8ce <__fp_pscB>
 95a:	18 f0       	brcs	.+6      	; 0x962 <__mulsf3+0x12>
 95c:	95 23       	and	r25, r21
 95e:	09 f0       	breq	.+2      	; 0x962 <__mulsf3+0x12>
 960:	a6 cf       	rjmp	.-180    	; 0x8ae <__fp_inf>
 962:	ab cf       	rjmp	.-170    	; 0x8ba <__fp_nan>
 964:	11 24       	eor	r1, r1
 966:	ee cf       	rjmp	.-36     	; 0x944 <__fp_szero>

00000968 <__mulsf3x>:
 968:	ca df       	rcall	.-108    	; 0x8fe <__fp_split3>
 96a:	a0 f3       	brcs	.-24     	; 0x954 <__mulsf3+0x4>

0000096c <__mulsf3_pse>:
 96c:	95 9f       	mul	r25, r21
 96e:	d1 f3       	breq	.-12     	; 0x964 <__mulsf3+0x14>
 970:	95 0f       	add	r25, r21
 972:	50 e0       	ldi	r21, 0x00	; 0
 974:	55 1f       	adc	r21, r21
 976:	62 9f       	mul	r22, r18
 978:	f0 01       	movw	r30, r0
 97a:	72 9f       	mul	r23, r18
 97c:	bb 27       	eor	r27, r27
 97e:	f0 0d       	add	r31, r0
 980:	b1 1d       	adc	r27, r1
 982:	63 9f       	mul	r22, r19
 984:	aa 27       	eor	r26, r26
 986:	f0 0d       	add	r31, r0
 988:	b1 1d       	adc	r27, r1
 98a:	aa 1f       	adc	r26, r26
 98c:	64 9f       	mul	r22, r20
 98e:	66 27       	eor	r22, r22
 990:	b0 0d       	add	r27, r0
 992:	a1 1d       	adc	r26, r1
 994:	66 1f       	adc	r22, r22
 996:	82 9f       	mul	r24, r18
 998:	22 27       	eor	r18, r18
 99a:	b0 0d       	add	r27, r0
 99c:	a1 1d       	adc	r26, r1
 99e:	62 1f       	adc	r22, r18
 9a0:	73 9f       	mul	r23, r19
 9a2:	b0 0d       	add	r27, r0
 9a4:	a1 1d       	adc	r26, r1
 9a6:	62 1f       	adc	r22, r18
 9a8:	83 9f       	mul	r24, r19
 9aa:	a0 0d       	add	r26, r0
 9ac:	61 1d       	adc	r22, r1
 9ae:	22 1f       	adc	r18, r18
 9b0:	74 9f       	mul	r23, r20
 9b2:	33 27       	eor	r19, r19
 9b4:	a0 0d       	add	r26, r0
 9b6:	61 1d       	adc	r22, r1
 9b8:	23 1f       	adc	r18, r19
 9ba:	84 9f       	mul	r24, r20
 9bc:	60 0d       	add	r22, r0
 9be:	21 1d       	adc	r18, r1
 9c0:	82 2f       	mov	r24, r18
 9c2:	76 2f       	mov	r23, r22
 9c4:	6a 2f       	mov	r22, r26
 9c6:	11 24       	eor	r1, r1
 9c8:	9f 57       	subi	r25, 0x7F	; 127
 9ca:	50 40       	sbci	r21, 0x00	; 0
 9cc:	8a f0       	brmi	.+34     	; 0x9f0 <__mulsf3_pse+0x84>
 9ce:	e1 f0       	breq	.+56     	; 0xa08 <__mulsf3_pse+0x9c>
 9d0:	88 23       	and	r24, r24
 9d2:	4a f0       	brmi	.+18     	; 0x9e6 <__mulsf3_pse+0x7a>
 9d4:	ee 0f       	add	r30, r30
 9d6:	ff 1f       	adc	r31, r31
 9d8:	bb 1f       	adc	r27, r27
 9da:	66 1f       	adc	r22, r22
 9dc:	77 1f       	adc	r23, r23
 9de:	88 1f       	adc	r24, r24
 9e0:	91 50       	subi	r25, 0x01	; 1
 9e2:	50 40       	sbci	r21, 0x00	; 0
 9e4:	a9 f7       	brne	.-22     	; 0x9d0 <__mulsf3_pse+0x64>
 9e6:	9e 3f       	cpi	r25, 0xFE	; 254
 9e8:	51 05       	cpc	r21, r1
 9ea:	70 f0       	brcs	.+28     	; 0xa08 <__mulsf3_pse+0x9c>
 9ec:	60 cf       	rjmp	.-320    	; 0x8ae <__fp_inf>
 9ee:	aa cf       	rjmp	.-172    	; 0x944 <__fp_szero>
 9f0:	5f 3f       	cpi	r21, 0xFF	; 255
 9f2:	ec f3       	brlt	.-6      	; 0x9ee <__mulsf3_pse+0x82>
 9f4:	98 3e       	cpi	r25, 0xE8	; 232
 9f6:	dc f3       	brlt	.-10     	; 0x9ee <__mulsf3_pse+0x82>
 9f8:	86 95       	lsr	r24
 9fa:	77 95       	ror	r23
 9fc:	67 95       	ror	r22
 9fe:	b7 95       	ror	r27
 a00:	f7 95       	ror	r31
 a02:	e7 95       	ror	r30
 a04:	9f 5f       	subi	r25, 0xFF	; 255
 a06:	c1 f7       	brne	.-16     	; 0x9f8 <__mulsf3_pse+0x8c>
 a08:	fe 2b       	or	r31, r30
 a0a:	88 0f       	add	r24, r24
 a0c:	91 1d       	adc	r25, r1
 a0e:	96 95       	lsr	r25
 a10:	87 95       	ror	r24
 a12:	97 f9       	bld	r25, 7
 a14:	08 95       	ret

00000a16 <malloc>:
 a16:	cf 93       	push	r28
 a18:	df 93       	push	r29
 a1a:	82 30       	cpi	r24, 0x02	; 2
 a1c:	91 05       	cpc	r25, r1
 a1e:	10 f4       	brcc	.+4      	; 0xa24 <malloc+0xe>
 a20:	82 e0       	ldi	r24, 0x02	; 2
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	e0 91 96 00 	lds	r30, 0x0096
 a28:	f0 91 97 00 	lds	r31, 0x0097
 a2c:	20 e0       	ldi	r18, 0x00	; 0
 a2e:	30 e0       	ldi	r19, 0x00	; 0
 a30:	a0 e0       	ldi	r26, 0x00	; 0
 a32:	b0 e0       	ldi	r27, 0x00	; 0
 a34:	30 97       	sbiw	r30, 0x00	; 0
 a36:	39 f1       	breq	.+78     	; 0xa86 <malloc+0x70>
 a38:	40 81       	ld	r20, Z
 a3a:	51 81       	ldd	r21, Z+1	; 0x01
 a3c:	48 17       	cp	r20, r24
 a3e:	59 07       	cpc	r21, r25
 a40:	b8 f0       	brcs	.+46     	; 0xa70 <malloc+0x5a>
 a42:	48 17       	cp	r20, r24
 a44:	59 07       	cpc	r21, r25
 a46:	71 f4       	brne	.+28     	; 0xa64 <malloc+0x4e>
 a48:	82 81       	ldd	r24, Z+2	; 0x02
 a4a:	93 81       	ldd	r25, Z+3	; 0x03
 a4c:	10 97       	sbiw	r26, 0x00	; 0
 a4e:	29 f0       	breq	.+10     	; 0xa5a <malloc+0x44>
 a50:	13 96       	adiw	r26, 0x03	; 3
 a52:	9c 93       	st	X, r25
 a54:	8e 93       	st	-X, r24
 a56:	12 97       	sbiw	r26, 0x02	; 2
 a58:	2c c0       	rjmp	.+88     	; 0xab2 <malloc+0x9c>
 a5a:	90 93 97 00 	sts	0x0097, r25
 a5e:	80 93 96 00 	sts	0x0096, r24
 a62:	27 c0       	rjmp	.+78     	; 0xab2 <malloc+0x9c>
 a64:	21 15       	cp	r18, r1
 a66:	31 05       	cpc	r19, r1
 a68:	31 f0       	breq	.+12     	; 0xa76 <malloc+0x60>
 a6a:	42 17       	cp	r20, r18
 a6c:	53 07       	cpc	r21, r19
 a6e:	18 f0       	brcs	.+6      	; 0xa76 <malloc+0x60>
 a70:	a9 01       	movw	r20, r18
 a72:	db 01       	movw	r26, r22
 a74:	01 c0       	rjmp	.+2      	; 0xa78 <malloc+0x62>
 a76:	ef 01       	movw	r28, r30
 a78:	9a 01       	movw	r18, r20
 a7a:	bd 01       	movw	r22, r26
 a7c:	df 01       	movw	r26, r30
 a7e:	02 80       	ldd	r0, Z+2	; 0x02
 a80:	f3 81       	ldd	r31, Z+3	; 0x03
 a82:	e0 2d       	mov	r30, r0
 a84:	d7 cf       	rjmp	.-82     	; 0xa34 <malloc+0x1e>
 a86:	21 15       	cp	r18, r1
 a88:	31 05       	cpc	r19, r1
 a8a:	f9 f0       	breq	.+62     	; 0xaca <malloc+0xb4>
 a8c:	28 1b       	sub	r18, r24
 a8e:	39 0b       	sbc	r19, r25
 a90:	24 30       	cpi	r18, 0x04	; 4
 a92:	31 05       	cpc	r19, r1
 a94:	80 f4       	brcc	.+32     	; 0xab6 <malloc+0xa0>
 a96:	8a 81       	ldd	r24, Y+2	; 0x02
 a98:	9b 81       	ldd	r25, Y+3	; 0x03
 a9a:	61 15       	cp	r22, r1
 a9c:	71 05       	cpc	r23, r1
 a9e:	21 f0       	breq	.+8      	; 0xaa8 <malloc+0x92>
 aa0:	fb 01       	movw	r30, r22
 aa2:	93 83       	std	Z+3, r25	; 0x03
 aa4:	82 83       	std	Z+2, r24	; 0x02
 aa6:	04 c0       	rjmp	.+8      	; 0xab0 <malloc+0x9a>
 aa8:	90 93 97 00 	sts	0x0097, r25
 aac:	80 93 96 00 	sts	0x0096, r24
 ab0:	fe 01       	movw	r30, r28
 ab2:	32 96       	adiw	r30, 0x02	; 2
 ab4:	44 c0       	rjmp	.+136    	; 0xb3e <malloc+0x128>
 ab6:	fe 01       	movw	r30, r28
 ab8:	e2 0f       	add	r30, r18
 aba:	f3 1f       	adc	r31, r19
 abc:	81 93       	st	Z+, r24
 abe:	91 93       	st	Z+, r25
 ac0:	22 50       	subi	r18, 0x02	; 2
 ac2:	31 09       	sbc	r19, r1
 ac4:	39 83       	std	Y+1, r19	; 0x01
 ac6:	28 83       	st	Y, r18
 ac8:	3a c0       	rjmp	.+116    	; 0xb3e <malloc+0x128>
 aca:	20 91 94 00 	lds	r18, 0x0094
 ace:	30 91 95 00 	lds	r19, 0x0095
 ad2:	23 2b       	or	r18, r19
 ad4:	41 f4       	brne	.+16     	; 0xae6 <malloc+0xd0>
 ad6:	20 91 76 00 	lds	r18, 0x0076
 ada:	30 91 77 00 	lds	r19, 0x0077
 ade:	30 93 95 00 	sts	0x0095, r19
 ae2:	20 93 94 00 	sts	0x0094, r18
 ae6:	20 91 74 00 	lds	r18, 0x0074
 aea:	30 91 75 00 	lds	r19, 0x0075
 aee:	21 15       	cp	r18, r1
 af0:	31 05       	cpc	r19, r1
 af2:	41 f4       	brne	.+16     	; 0xb04 <malloc+0xee>
 af4:	2d b7       	in	r18, 0x3d	; 61
 af6:	3e b7       	in	r19, 0x3e	; 62
 af8:	40 91 78 00 	lds	r20, 0x0078
 afc:	50 91 79 00 	lds	r21, 0x0079
 b00:	24 1b       	sub	r18, r20
 b02:	35 0b       	sbc	r19, r21
 b04:	e0 91 94 00 	lds	r30, 0x0094
 b08:	f0 91 95 00 	lds	r31, 0x0095
 b0c:	e2 17       	cp	r30, r18
 b0e:	f3 07       	cpc	r31, r19
 b10:	a0 f4       	brcc	.+40     	; 0xb3a <malloc+0x124>
 b12:	2e 1b       	sub	r18, r30
 b14:	3f 0b       	sbc	r19, r31
 b16:	28 17       	cp	r18, r24
 b18:	39 07       	cpc	r19, r25
 b1a:	78 f0       	brcs	.+30     	; 0xb3a <malloc+0x124>
 b1c:	ac 01       	movw	r20, r24
 b1e:	4e 5f       	subi	r20, 0xFE	; 254
 b20:	5f 4f       	sbci	r21, 0xFF	; 255
 b22:	24 17       	cp	r18, r20
 b24:	35 07       	cpc	r19, r21
 b26:	48 f0       	brcs	.+18     	; 0xb3a <malloc+0x124>
 b28:	4e 0f       	add	r20, r30
 b2a:	5f 1f       	adc	r21, r31
 b2c:	50 93 95 00 	sts	0x0095, r21
 b30:	40 93 94 00 	sts	0x0094, r20
 b34:	81 93       	st	Z+, r24
 b36:	91 93       	st	Z+, r25
 b38:	02 c0       	rjmp	.+4      	; 0xb3e <malloc+0x128>
 b3a:	e0 e0       	ldi	r30, 0x00	; 0
 b3c:	f0 e0       	ldi	r31, 0x00	; 0
 b3e:	cf 01       	movw	r24, r30
 b40:	df 91       	pop	r29
 b42:	cf 91       	pop	r28
 b44:	08 95       	ret

00000b46 <free>:
 b46:	cf 93       	push	r28
 b48:	df 93       	push	r29
 b4a:	00 97       	sbiw	r24, 0x00	; 0
 b4c:	09 f4       	brne	.+2      	; 0xb50 <free+0xa>
 b4e:	87 c0       	rjmp	.+270    	; 0xc5e <free+0x118>
 b50:	fc 01       	movw	r30, r24
 b52:	32 97       	sbiw	r30, 0x02	; 2
 b54:	13 82       	std	Z+3, r1	; 0x03
 b56:	12 82       	std	Z+2, r1	; 0x02
 b58:	c0 91 96 00 	lds	r28, 0x0096
 b5c:	d0 91 97 00 	lds	r29, 0x0097
 b60:	20 97       	sbiw	r28, 0x00	; 0
 b62:	81 f4       	brne	.+32     	; 0xb84 <free+0x3e>
 b64:	20 81       	ld	r18, Z
 b66:	31 81       	ldd	r19, Z+1	; 0x01
 b68:	28 0f       	add	r18, r24
 b6a:	39 1f       	adc	r19, r25
 b6c:	80 91 94 00 	lds	r24, 0x0094
 b70:	90 91 95 00 	lds	r25, 0x0095
 b74:	82 17       	cp	r24, r18
 b76:	93 07       	cpc	r25, r19
 b78:	79 f5       	brne	.+94     	; 0xbd8 <free+0x92>
 b7a:	f0 93 95 00 	sts	0x0095, r31
 b7e:	e0 93 94 00 	sts	0x0094, r30
 b82:	6d c0       	rjmp	.+218    	; 0xc5e <free+0x118>
 b84:	de 01       	movw	r26, r28
 b86:	20 e0       	ldi	r18, 0x00	; 0
 b88:	30 e0       	ldi	r19, 0x00	; 0
 b8a:	ae 17       	cp	r26, r30
 b8c:	bf 07       	cpc	r27, r31
 b8e:	50 f4       	brcc	.+20     	; 0xba4 <free+0x5e>
 b90:	12 96       	adiw	r26, 0x02	; 2
 b92:	4d 91       	ld	r20, X+
 b94:	5c 91       	ld	r21, X
 b96:	13 97       	sbiw	r26, 0x03	; 3
 b98:	9d 01       	movw	r18, r26
 b9a:	41 15       	cp	r20, r1
 b9c:	51 05       	cpc	r21, r1
 b9e:	09 f1       	breq	.+66     	; 0xbe2 <free+0x9c>
 ba0:	da 01       	movw	r26, r20
 ba2:	f3 cf       	rjmp	.-26     	; 0xb8a <free+0x44>
 ba4:	b3 83       	std	Z+3, r27	; 0x03
 ba6:	a2 83       	std	Z+2, r26	; 0x02
 ba8:	40 81       	ld	r20, Z
 baa:	51 81       	ldd	r21, Z+1	; 0x01
 bac:	84 0f       	add	r24, r20
 bae:	95 1f       	adc	r25, r21
 bb0:	8a 17       	cp	r24, r26
 bb2:	9b 07       	cpc	r25, r27
 bb4:	71 f4       	brne	.+28     	; 0xbd2 <free+0x8c>
 bb6:	8d 91       	ld	r24, X+
 bb8:	9c 91       	ld	r25, X
 bba:	11 97       	sbiw	r26, 0x01	; 1
 bbc:	84 0f       	add	r24, r20
 bbe:	95 1f       	adc	r25, r21
 bc0:	02 96       	adiw	r24, 0x02	; 2
 bc2:	91 83       	std	Z+1, r25	; 0x01
 bc4:	80 83       	st	Z, r24
 bc6:	12 96       	adiw	r26, 0x02	; 2
 bc8:	8d 91       	ld	r24, X+
 bca:	9c 91       	ld	r25, X
 bcc:	13 97       	sbiw	r26, 0x03	; 3
 bce:	93 83       	std	Z+3, r25	; 0x03
 bd0:	82 83       	std	Z+2, r24	; 0x02
 bd2:	21 15       	cp	r18, r1
 bd4:	31 05       	cpc	r19, r1
 bd6:	29 f4       	brne	.+10     	; 0xbe2 <free+0x9c>
 bd8:	f0 93 97 00 	sts	0x0097, r31
 bdc:	e0 93 96 00 	sts	0x0096, r30
 be0:	3e c0       	rjmp	.+124    	; 0xc5e <free+0x118>
 be2:	d9 01       	movw	r26, r18
 be4:	13 96       	adiw	r26, 0x03	; 3
 be6:	fc 93       	st	X, r31
 be8:	ee 93       	st	-X, r30
 bea:	12 97       	sbiw	r26, 0x02	; 2
 bec:	4d 91       	ld	r20, X+
 bee:	5d 91       	ld	r21, X+
 bf0:	a4 0f       	add	r26, r20
 bf2:	b5 1f       	adc	r27, r21
 bf4:	ea 17       	cp	r30, r26
 bf6:	fb 07       	cpc	r31, r27
 bf8:	79 f4       	brne	.+30     	; 0xc18 <free+0xd2>
 bfa:	80 81       	ld	r24, Z
 bfc:	91 81       	ldd	r25, Z+1	; 0x01
 bfe:	84 0f       	add	r24, r20
 c00:	95 1f       	adc	r25, r21
 c02:	02 96       	adiw	r24, 0x02	; 2
 c04:	d9 01       	movw	r26, r18
 c06:	11 96       	adiw	r26, 0x01	; 1
 c08:	9c 93       	st	X, r25
 c0a:	8e 93       	st	-X, r24
 c0c:	82 81       	ldd	r24, Z+2	; 0x02
 c0e:	93 81       	ldd	r25, Z+3	; 0x03
 c10:	13 96       	adiw	r26, 0x03	; 3
 c12:	9c 93       	st	X, r25
 c14:	8e 93       	st	-X, r24
 c16:	12 97       	sbiw	r26, 0x02	; 2
 c18:	e0 e0       	ldi	r30, 0x00	; 0
 c1a:	f0 e0       	ldi	r31, 0x00	; 0
 c1c:	8a 81       	ldd	r24, Y+2	; 0x02
 c1e:	9b 81       	ldd	r25, Y+3	; 0x03
 c20:	00 97       	sbiw	r24, 0x00	; 0
 c22:	19 f0       	breq	.+6      	; 0xc2a <free+0xe4>
 c24:	fe 01       	movw	r30, r28
 c26:	ec 01       	movw	r28, r24
 c28:	f9 cf       	rjmp	.-14     	; 0xc1c <free+0xd6>
 c2a:	ce 01       	movw	r24, r28
 c2c:	02 96       	adiw	r24, 0x02	; 2
 c2e:	28 81       	ld	r18, Y
 c30:	39 81       	ldd	r19, Y+1	; 0x01
 c32:	82 0f       	add	r24, r18
 c34:	93 1f       	adc	r25, r19
 c36:	20 91 94 00 	lds	r18, 0x0094
 c3a:	30 91 95 00 	lds	r19, 0x0095
 c3e:	28 17       	cp	r18, r24
 c40:	39 07       	cpc	r19, r25
 c42:	69 f4       	brne	.+26     	; 0xc5e <free+0x118>
 c44:	30 97       	sbiw	r30, 0x00	; 0
 c46:	29 f4       	brne	.+10     	; 0xc52 <free+0x10c>
 c48:	10 92 97 00 	sts	0x0097, r1
 c4c:	10 92 96 00 	sts	0x0096, r1
 c50:	02 c0       	rjmp	.+4      	; 0xc56 <free+0x110>
 c52:	13 82       	std	Z+3, r1	; 0x03
 c54:	12 82       	std	Z+2, r1	; 0x02
 c56:	d0 93 95 00 	sts	0x0095, r29
 c5a:	c0 93 94 00 	sts	0x0094, r28
 c5e:	df 91       	pop	r29
 c60:	cf 91       	pop	r28
 c62:	08 95       	ret

00000c64 <_exit>:
 c64:	f8 94       	cli

00000c66 <__stop_program>:
 c66:	ff cf       	rjmp	.-2      	; 0xc66 <__stop_program>
